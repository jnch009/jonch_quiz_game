{"version":3,"sources":["components/Question/Question.js","components/Home/App.js","index.js"],"names":["Question","props","handleRadioClick","radio","setState","selectedAnswer","handleSubmitClick","showAnswer","onHandleQuestionSubmit","state","questionToAnswer","a","handleNextClick","onHandleQuestionUpdate","questionIndex","answerRender","this","className","btnDisplay","type","onClick","disabled","q","choices","map","choice","key","id","name","checked","onChange","htmlFor","Component","App","handleQuestionSubmit","correct","correctAnswers","handleQuestionUpdate","index","quizQuestions","length","quizCompleted","handleQuizReset","loading","fetch","process","then","res","json","data","quizQuestion","score","currentScore","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.554e72a8.chunk.js","sourcesContent":["import className from \"classnames\";\r\nimport React, { Component } from \"react\";\r\n\r\nimport \"./Question.css\";\r\n\r\nconst answerBox = \"answerBox\";\r\nconst questionSubmit = \"questionSubmit\";\r\nexport default class Question extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedAnswer: \"\",\r\n      showAnswer: false\r\n    };\r\n  }\r\n\r\n  handleRadioClick = radio => {\r\n    this.setState({\r\n      selectedAnswer: radio\r\n    });\r\n  };\r\n\r\n  handleSubmitClick = () => {\r\n    this.setState({ showAnswer: true });\r\n    this.props.onHandleQuestionSubmit(\r\n      this.state.selectedAnswer === this.props.questionToAnswer.a\r\n    );\r\n  };\r\n\r\n  handleNextClick = () => {\r\n    this.setState({\r\n      selectedAnswer: \"\",\r\n      showAnswer: false\r\n    });\r\n    this.props.onHandleQuestionUpdate(this.props.questionIndex + 1);\r\n  };\r\n\r\n  render() {\r\n    let answerRender;\r\n\r\n    if (this.state.showAnswer) {\r\n      this.props.questionToAnswer.a === this.state.selectedAnswer\r\n        ? (answerRender = (\r\n            <h6 className={className(answerBox, \"bg-success\")}>\r\n              You are correct!\r\n            </h6>\r\n          ))\r\n        : (answerRender = (\r\n            <h6 className={className(answerBox, \"bg-danger\")}>\r\n              Incorrect! This is your answer {this.state.selectedAnswer}\r\n              <br />\r\n              The correct answer is {this.props.questionToAnswer.a}\r\n            </h6>\r\n          ));\r\n    } else {\r\n      answerRender = null;\r\n    }\r\n\r\n    const btnDisplay = (\r\n      <button\r\n        className={className(\"btn\", \"btn-primary\", questionSubmit)}\r\n        type=\"submit\"\r\n        onClick={this.handleSubmitClick}\r\n        disabled={!this.state.selectedAnswer}\r\n      >\r\n        Submit\r\n      </button>\r\n    );\r\n\r\n    return (\r\n      <div className=\"questionWrapper\">\r\n        <h4>{this.props.questionToAnswer.q}</h4>\r\n        <div className=\"flexAnswers\">\r\n          {this.props.questionToAnswer.choices.map(choice => (\r\n            <div key={choice}>\r\n              <input\r\n                id={choice}\r\n                type=\"radio\"\r\n                name=\"question\"\r\n                checked={this.state.selectedAnswer === choice}\r\n                disabled={this.state.showAnswer}\r\n                onChange={() => this.handleRadioClick(choice)}\r\n              />\r\n              <label htmlFor={choice}>{choice}</label>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        {answerRender}\r\n        {this.state.showAnswer ? (\r\n          <button\r\n            className={className(\"btn\", \"btn-primary\", questionSubmit)}\r\n            type=\"submit\"\r\n            onClick={this.handleNextClick}\r\n          >\r\n            Next\r\n          </button>\r\n        ) : (\r\n          btnDisplay\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import className from 'classnames';\r\nimport React, { Component } from 'react';\r\n\r\nimport Question from '../Question/Question';\r\n\r\nimport './App.css';\r\n\r\n// defining questions in global scope so that it doesn't get redefined every single time\r\n// store by reference vs store by value\r\n// reference can still be updated even if it's defined as const\r\n// const quizQuestions = [];\r\nconst scoreMessage = score => {\r\n  if (score >= 75) {\r\n    return 'Great Work!';\r\n  } else if (score < 75 && score >= 50) {\r\n    return 'Not good enough!';\r\n  } else {\r\n    return 'You need to work harder!';\r\n  }\r\n};\r\nconst questionSubmit = 'questionSubmit';\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // below userAnswers not needed if individual question scores is provided at the end. Will think about adding this later.\r\n      // userAnswers: [],\r\n      quizQuestions: [],\r\n      correctAnswers: 0,\r\n      questionIndex: 0,\r\n      quizCompleted: false,\r\n      loading: true,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(`${process.env.REACT_APP_FETCH_API}`)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        data.map(quizQuestion =>\r\n          this.setState({\r\n            quizQuestions: [\r\n              ...this.state.quizQuestions,\r\n              {\r\n                q: quizQuestion['Question'],\r\n                choices: [\r\n                  quizQuestion['Choice 1'],\r\n                  quizQuestion['Choice 2'],\r\n                  quizQuestion['Choice 3'],\r\n                ],\r\n                a: quizQuestion['Answer'],\r\n              },\r\n            ],\r\n          }),\r\n        );\r\n        this.setState({ loading: false });\r\n      });\r\n  }\r\n\r\n  //after the user submits\r\n  handleQuestionSubmit = correct => {\r\n    if (correct) {\r\n      this.setState({\r\n        correctAnswers: this.state.correctAnswers + 1,\r\n      });\r\n    }\r\n  };\r\n\r\n  // after the user hits 'Next' button\r\n  handleQuestionUpdate = index => {\r\n    if (index >= this.state.quizQuestions.length) {\r\n      this.setState({\r\n        quizCompleted: true,\r\n        questionIndex: index,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        questionIndex: index,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleQuizReset = () => {\r\n    this.setState({\r\n      correctAnswers: 0,\r\n      questionIndex: 0,\r\n      quizCompleted: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.loading) {\r\n      return <div>Loading...</div>;\r\n    }\r\n\r\n    // next button or timeout to show next question\r\n    let currentScore =\r\n      (this.state.correctAnswers / this.state.quizQuestions.length) * 100;\r\n    return (\r\n      <div className='App'>\r\n        <div className='jumbotron'>\r\n          {this.state.quizCompleted ? (\r\n            <>\r\n              <div>Congratulations on finishing the quiz!</div>\r\n              <div>Here is how you did</div>\r\n              <h1 className='display-1'>{currentScore}%</h1>\r\n              <div className='display-4'>{scoreMessage(currentScore)}</div>\r\n              <button\r\n                className={className('btn', 'btn-primary', questionSubmit)}\r\n                type='submit'\r\n                onClick={this.handleQuizReset}\r\n              >\r\n                Restart Quiz\r\n              </button>\r\n            </>\r\n          ) : (\r\n            <Question\r\n              questionToAnswer={\r\n                this.state.quizQuestions[this.state.questionIndex]\r\n              }\r\n              questionIndex={this.state.questionIndex}\r\n              onHandleQuestionUpdate={this.handleQuestionUpdate}\r\n              onHandleQuestionSubmit={this.handleQuestionSubmit}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./components/Home/App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}