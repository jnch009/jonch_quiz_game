{"version":3,"sources":["components/Question/Question.js","components/Home/App.js","index.js"],"names":["answerBox","questionSubmit","Question","Component","constructor","props","super","this","handleRadioClick","radio","setState","selectedAnswer","handleSubmitClick","showAnswer","onHandleQuestionSubmit","state","questionToAnswer","a","handleNextClick","onHandleQuestionUpdate","questionIndex","render","answerRender","react_default","createElement","className","btnDisplay","type","onClick","disabled","q","choices","map","choice","key","id","name","checked","onChange","htmlFor","scoreMessage","score","rootElement","document","getElementById","ReactDOM","StrictMode","handleQuestionSubmit","correct","correctAnswers","handleQuestionUpdate","index","quizQuestions","length","quizCompleted","handleQuizReset","loading","componentDidMount","fetch","then","res","json","data","quizQuestion","currentScore","Fragment","Question_Question_Question"],"mappings":"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","file":"static/js/main.fdb6927c.chunk.js","sourcesContent":["import className from \"classnames\";\r\nimport React, { Component } from \"react\";\r\n\r\nimport \"./Question.css\";\r\n\r\nconst answerBox = \"answerBox\";\r\nconst questionSubmit = \"questionSubmit\";\r\nexport default class Question extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedAnswer: \"\",\r\n      showAnswer: false\r\n    };\r\n  }\r\n\r\n  handleRadioClick = radio => {\r\n    this.setState({\r\n      selectedAnswer: radio\r\n    });\r\n  };\r\n\r\n  handleSubmitClick = () => {\r\n    this.setState({ showAnswer: true });\r\n    this.props.onHandleQuestionSubmit(\r\n      this.state.selectedAnswer === this.props.questionToAnswer.a\r\n    );\r\n  };\r\n\r\n  handleNextClick = () => {\r\n    this.setState({\r\n      selectedAnswer: \"\",\r\n      showAnswer: false\r\n    });\r\n    this.props.onHandleQuestionUpdate(this.props.questionIndex + 1);\r\n  };\r\n\r\n  render() {\r\n    let answerRender;\r\n\r\n    if (this.state.showAnswer) {\r\n      this.props.questionToAnswer.a === this.state.selectedAnswer\r\n        ? (answerRender = (\r\n            <h6 className={className(answerBox, \"bg-success\")}>\r\n              You are correct!\r\n            </h6>\r\n          ))\r\n        : (answerRender = (\r\n            <h6 className={className(answerBox, \"bg-danger\")}>\r\n              Incorrect! This is your answer {this.state.selectedAnswer}\r\n              <br />\r\n              The correct answer is {this.props.questionToAnswer.a}\r\n            </h6>\r\n          ));\r\n    } else {\r\n      answerRender = null;\r\n    }\r\n\r\n    const btnDisplay = (\r\n      <button\r\n        className={className(\"btn\", \"btn-primary\", questionSubmit)}\r\n        type=\"submit\"\r\n        onClick={this.handleSubmitClick}\r\n        disabled={!this.state.selectedAnswer}\r\n      >\r\n        Submit\r\n      </button>\r\n    );\r\n\r\n    return (\r\n      <div className=\"questionWrapper\">\r\n        <h4>{this.props.questionToAnswer.q}</h4>\r\n        <div className=\"flexAnswers\">\r\n          {this.props.questionToAnswer.choices.map(choice => (\r\n            <div key={choice}>\r\n              <input\r\n                id={choice}\r\n                type=\"radio\"\r\n                name=\"question\"\r\n                checked={this.state.selectedAnswer === choice}\r\n                disabled={this.state.showAnswer}\r\n                onChange={() => this.handleRadioClick(choice)}\r\n              />\r\n              <label htmlFor={choice}>{choice}</label>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        {answerRender}\r\n        {this.state.showAnswer ? (\r\n          <button\r\n            className={className(\"btn\", \"btn-primary\", questionSubmit)}\r\n            type=\"submit\"\r\n            onClick={this.handleNextClick}\r\n          >\r\n            Next\r\n          </button>\r\n        ) : (\r\n          btnDisplay\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import className from \"classnames\";\r\nimport React, { Component } from \"react\";\r\n\r\nimport Question from \"../Question/Question\";\r\n\r\nimport \"./App.css\";\r\n\r\n// defining questions in global scope so that it doesn't get redefined every single time\r\n// store by reference vs store by value\r\n// reference can still be updated even if it's defined as const\r\n// const quizQuestions = [];\r\nconst scoreMessage = score => {\r\n  if (score >= 75) {\r\n    return \"Great Work!\";\r\n  } else if (score < 75 && score >= 50) {\r\n    return \"Not good enough!\";\r\n  } else {\r\n    return \"You need to work harder!\";\r\n  }\r\n};\r\nconst questionSubmit = \"questionSubmit\";\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // below userAnswers not needed if individual question scores is provided at the end. Will think about adding this later.\r\n      // userAnswers: [],\r\n      quizQuestions: [],\r\n      correctAnswers: 0,\r\n      questionIndex: 0,\r\n      quizCompleted: false,\r\n      loading: true\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"http://localhost:3001/\")\r\n      .then(res => {\r\n        return res.json();\r\n      })\r\n      .then(data => {\r\n        data.map(quizQuestion => {\r\n          this.setState({\r\n            quizQuestions: [\r\n              ...this.state.quizQuestions,\r\n              {\r\n                q: quizQuestion[\"Question\"],\r\n                choices: [\r\n                  quizQuestion[\"Choice 1\"],\r\n                  quizQuestion[\"Choice 2\"],\r\n                  quizQuestion[\"Choice 3\"]\r\n                ],\r\n                a: quizQuestion[\"Answer\"]\r\n              }\r\n            ]\r\n          });\r\n        });\r\n        this.setState({ loading: false });\r\n      });\r\n  }\r\n\r\n  //after the user submits\r\n  handleQuestionSubmit = correct => {\r\n    if (correct) {\r\n      this.setState({\r\n        correctAnswers: this.state.correctAnswers + 1\r\n      });\r\n    }\r\n  };\r\n\r\n  // after the user hits 'Next' button\r\n  handleQuestionUpdate = index => {\r\n    if (index >= this.state.quizQuestions.length) {\r\n      this.setState({\r\n        quizCompleted: true,\r\n        questionIndex: index\r\n      });\r\n    } else {\r\n      this.setState({\r\n        questionIndex: index\r\n      });\r\n    }\r\n  };\r\n\r\n  handleQuizReset = () => {\r\n    this.setState({\r\n      correctAnswers: 0,\r\n      questionIndex: 0,\r\n      quizCompleted: false\r\n    });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.loading) {\r\n      return <div>Loading...</div>;\r\n    }\r\n\r\n    // next button or timeout to show next question\r\n    let currentScore =\r\n      (this.state.correctAnswers / this.state.quizQuestions.length) * 100;\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"jumbotron\">\r\n          {this.state.quizCompleted ? (\r\n            <>\r\n              <div>Congratulations on finishing the quiz!</div>\r\n              <div>Here is how you did</div>\r\n              <h1 className=\"display-1\">{currentScore}%</h1>\r\n              <div className=\"display-4\">{scoreMessage(currentScore)}</div>\r\n              <button\r\n                className={className(\"btn\", \"btn-primary\", questionSubmit)}\r\n                type=\"submit\"\r\n                onClick={this.handleQuizReset}\r\n              >\r\n                Restart Quiz\r\n              </button>\r\n            </>\r\n          ) : (\r\n            <Question\r\n              questionToAnswer={\r\n                this.state.quizQuestions[this.state.questionIndex]\r\n              }\r\n              questionIndex={this.state.questionIndex}\r\n              onHandleQuestionUpdate={this.handleQuestionUpdate}\r\n              onHandleQuestionSubmit={this.handleQuestionSubmit}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./components/Home/App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}